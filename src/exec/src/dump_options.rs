use clap::{ArgAction, Parser};

/// Simple program to greet a person
#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
pub struct DumpOptions {
    /// pb files(can be used mulpitle times)
    #[arg(short, long, value_parser, action = ArgAction::Append)]
    pub pb_file: Vec<String>,

    /// binary files generated by xresloader(can be used mulpitle times)
    #[arg(short, long, value_parser, action = ArgAction::Append)]
    pub bin_file: Vec<String>,

    /// Debug mode
    #[arg(long, value_parser, default_value = "false")]
    pub debug: bool,

    /// Pretty mode
    #[arg(long, value_parser, default_value = "false")]
    pub pretty: bool,

    /// Plain mode
    #[arg(long, value_parser, default_value = "false")]
    pub plain: bool,

    /// head_only mode
    #[arg(long, value_parser, default_value = "false")]
    pub head_only: bool,

    /// silence mode
    #[arg(long, value_parser, default_value = "false")]
    pub silence: bool,

    /// Output string table as json
    #[arg(
        long,
        value_parser,
        default_value = "",
        value_name = "OUTPUT JSON FILE PATH"
    )]
    pub output_string_table_json: String,

    /// Output string table as text lines
    #[arg(
        long,
        value_parser,
        default_value = "",
        value_name = "OUTPUT TEXT FILE PATH"
    )]
    pub output_string_table_text: String,

    /// Field value include matching rule for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "REGEX")]
    pub string_table_include_value_regex_rule: Vec<String>,

    /// Load field value include matching rule(regex) from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "REGEX")]
    pub string_table_include_value_regex_file: Vec<String>,

    /// Field value exclude matching rule for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "REGEX FILE PATH")]
    pub string_table_exclude_value_regex_rule: Vec<String>,

    /// Load field value exclude matching rule(regex) from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "REGEX FILE PATH")]
    pub string_table_exclude_value_regex_file: Vec<String>,

    /// Load field include path from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "FILE PATH")]
    pub string_table_include_field_path_file: Vec<String>,

    /// Load field exclude path from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "FILE PATH")]
    pub string_table_exclude_field_path_file: Vec<String>,

    /// Load message exclude path from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "FILE PATH")]
    pub string_table_exclude_message_path_file: Vec<String>,

    /// Load message include path from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "FILE PATH")]
    pub string_table_include_message_path_file: Vec<String>,

    /// String table pretty mode
    #[arg(long, value_parser, default_value = "false")]
    pub string_table_pretty: bool,

    /// Output tagged field as json
    #[arg(
        long,
        value_parser,
        default_value = "",
        value_name = "OUTPUT JSON FILE PATH"
    )]
    pub output_tagged_data_json: String,

    /// Output tagged field as text lines
    #[arg(
        long,
        value_parser,
        default_value = "",
        value_name = "OUTPUT TEXT FILE PATH"
    )]
    pub output_tagged_data_text: String,

    /// Field tags(can be used mulpitle times)
    #[arg(short, long, value_parser, action = ArgAction::Append, value_name = "FIELD TAGS")]
    pub tagged_field_tags: Vec<String>,

    /// Oneof tags(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "ONEOF TAGS")]
    pub tagged_oneof_tags: Vec<String>,

    /// Field value include matching rule for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "REGEX")]
    pub tagged_data_include_value_regex_rule: Vec<String>,

    /// Load field value include matching rule(regex) from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "REGEX")]
    pub tagged_data_include_value_regex_file: Vec<String>,

    /// Field value exclude matching rule for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "REGEX FILE PATH")]
    pub tagged_data_exclude_value_regex_rule: Vec<String>,

    /// Load field value exclude matching rule(regex) from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "REGEX FILE PATH")]
    pub tagged_data_exclude_value_regex_file: Vec<String>,

    /// Load field include path from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "FILE PATH")]
    pub tagged_data_include_field_path_file: Vec<String>,

    /// Load field exclude path from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "FILE PATH")]
    pub tagged_data_exclude_field_path_file: Vec<String>,

    /// Load message exclude path from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "FILE PATH")]
    pub tagged_data_exclude_message_path_file: Vec<String>,

    /// Load message include path from file for string table(can be used mulpitle times)
    #[arg(long, value_parser, action = ArgAction::Append, value_name = "FILE PATH")]
    pub tagged_data_include_message_path_file: Vec<String>,

    /// Tagged data pretty mode
    #[arg(long, value_parser, default_value = "false")]
    pub tagged_data_pretty: bool,
}
