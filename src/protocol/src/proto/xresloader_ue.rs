// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `xresloader_ue.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// Extension fields
pub mod exts {

    pub const key_tag: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, i64> = ::protobuf::ext::ExtFieldOptional::new(1101, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_INT64);

    pub const ue_type_name: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(1102, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const ue_type_is_class: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1103, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const helper: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(1101, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const not_data_table: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1102, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13xresloader_ue.proto\x12\x11org.xresloader.ue\x1a\x20google/protobu\
    f/descriptor.proto:7\n\x07key_tag\x18\xcd\x08\x20\x01(\x03\x12\x1d.googl\
    e.protobuf.FieldOptionsR\x06keyTag:@\n\x0cue_type_name\x18\xce\x08\x20\
    \x01(\t\x12\x1d.google.protobuf.FieldOptionsR\nueTypeName:G\n\x10ue_type\
    _is_class\x18\xcf\x08\x20\x01(\x08\x12\x1d.google.protobuf.FieldOptionsR\
    \rueTypeIsClass:8\n\x06helper\x18\xcd\x08\x20\x01(\t\x12\x1f.google.prot\
    obuf.MessageOptionsR\x06helper:F\n\x0enot_data_table\x18\xce\x08\x20\x01\
    (\x08\x12\x1f.google.protobuf.MessageOptionsR\x0cnotDataTableb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
